#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Error handling
set -e
trap 'echo -e "${RED}Error: Script failed${NC}" >&2' ERR

# Function to prompt for a value with a default
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    local value

    echo -e "${BLUE}$prompt${NC} (default: ${GREEN}$default${NC}): " >&2
    read -r value
    echo "${value:-$default}"
}

# Function to validate Hetzner API token
validate_token() {
    local token="$1"
    if [[ ! $token =~ ^[A-Za-z0-9]+$ ]]; then
        echo -e "${RED}Error: Invalid API token format${NC}" >&2
        return 1
    fi
}

echo -e "${GREEN}WireGuard + Unbound Initialization Script${NC}\n"

# Check if files already exist
if [[ -f packer/packer.auto.pkrvars.hcl ]] || [[ -f terraform/terraform.tfvars ]]; then
    read -p "Configuration files already exist. Overwrite? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Exiting without changes${NC}"
        exit 0
    fi
fi

# Gather shared variables
echo -e "\n${BLUE}Please enter the following configuration values:${NC}"

# Hetzner API Token
while true; do
    read -p "Enter your Hetzner Cloud API Token: " HCLOUD_API_TOKEN
    if validate_token "$HCLOUD_API_TOKEN"; then
        break
    fi
done

# Server Location
LOCATION=$(prompt_with_default "Enter server location (fsn1, nbg1, hel1)" "fsn1")

# Server Type
SERVER_TYPE=$(prompt_with_default "Enter server type" "cx42")

# Server Name
SERVER_NAME=$(prompt_with_default "Enter server name" "wireguard")

# Update Packer variables
echo -e "\n${BLUE}Updating Packer configuration...${NC}"
cat > packer/packer.auto.pkrvars.hcl << EOF
# Generated by init.sh
hcloud_api_token = "$HCLOUD_API_TOKEN"
server_type      = "$SERVER_TYPE"
location         = "$LOCATION"
image            = "ubuntu-24.04"
server_name      = "$SERVER_NAME"
EOF

# Update Terraform variables
echo -e "\n${BLUE}Updating Terraform configuration...${NC}"
cat > terraform/terraform.tfvars << EOF
# Generated by init.sh - Shared variables
hcloud_api_token    = "$HCLOUD_API_TOKEN"
server_type         = "$SERVER_TYPE"
server_location     = "$LOCATION"
server_name         = "$SERVER_NAME"

# Server configuration
server_architecture   = "x86"
server_image_selector = "service=$SERVER_NAME"

# WireGuard configuration
server_wg_privatekey = ""     # Your WireGuard private key
server_wg_peers = [           # List of WireGuard peer configurations
  {
    publickey    = ""            # Peer's public key
    presharedkey = ""            # Peer's preshared key
  }
]

# SSH Configuration
ssh_publickey      = ""       # Your SSH public key
ssh_publickey_name = ""       # Name for the SSH key in Hetzner

# User configuration
users = [
  {
    name                = "your-username"
    sudo                = true
    shell              = "/bin/bash"
    groups             = ["sudo"]
    ssh_authorized_keys = [
      "ssh-rsa YOUR_SSH_KEY"     # Your SSH public key
    ]
  }
]
EOF

echo -e "\n${GREEN}Initialization complete!${NC}"
echo -e "\n${BLUE}Next steps:${NC}"
echo "1. Edit terraform/terraform.tfvars and configure:"
echo "   - WireGuard private key and peer configurations"
echo "   - SSH public key and key name"
echo "   - User configuration"
echo "2. Build the server image:"
echo "   cd packer && packer init && packer build ./"
echo "3. Deploy the infrastructure:"
echo "   cd ../terraform && terraform init && terraform apply"

# Make the script executable
chmod +x init.sh 