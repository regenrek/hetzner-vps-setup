#!/bin/sh

set -eu

# Parse command line options.
optParse() {
	SEP="$(printf '\037')"
	while [ "${#}" -gt '0' ]; do
		case "${1?}" in
			# Short options that accept a value need a "*" in their pattern because they can be found in the "-A<value>" form.
			'-i'*|'--interface') optArgStr "${@-}"; interface="${optArg?}"; shift "${optShift:?}" ;;
			'-n'*|'--peer-number') optArgStr "${@-}"; peerNumber="${optArg?}"; shift "${optShift:?}" ;;
			'-c'*|'--peer-comment') optArgStr "${@-}"; peerComment="${optArg?}"; shift "${optShift:?}" ;;
			'-e'*|'--peer-endpoint') optArgStr "${@-}"; peerEndpoint="${optArg?}"; shift "${optShift:?}" ;;
			'-k'*|'--peer-private-key') optArgStr "${@-}"; peerPrivateKey="${optArg?}"; shift "${optShift:?}" ;;
			'-p'*|'--peer-public-key') optArgStr "${@-}"; peerPublicKey="${optArg?}"; shift "${optShift:?}" ;;
			'-s'*|'--peer-preshared-key') optArgStr "${@-}"; peerPresharedKey="${optArg?}"; shift "${optShift:?}" ;;
			'-r' |'--qr'|'--no-qr') optArgBool "${@-}"; qr="${optArg:?}" ;;
			'-q' |'--quiet'|'--no-quiet') optArgBool "${@-}"; quiet="${optArg:?}" ;;
			'-h' |'--help') showHelp ;;
			# If "--" is found, the remaining positional parameters are saved and the parsing ends.
			--) shift; _IFS="${IFS?}"; IFS="${SEP:?}"; POS="${POS-}${POS+${SEP:?}}${*-}"; IFS="${_IFS?}"; break ;;
			# If a long option in the form "--opt=value" is found, it is split into "--opt" and "value".
			--*=*) optSplitEquals "${@-}"; shift; set -- "${optName:?}" "${optArg?}" "${@-}"; continue ;;
			# If an option did not match any pattern, an error is thrown.
			-?|--*) optDie "Illegal option ${1:?}" ;;
			# If multiple short options in the form "-AB" are found, they are split into "-A" and "-B".
			-?*) optSplitShort "${@-}"; shift; set -- "${optAName:?}" "${optBName:?}" "${@-}"; continue ;;
			# If a positional parameter is found, it is saved.
			*) POS="${POS-}${POS+${SEP:?}}${1?}" ;;
		esac
		shift
	done
}
optSplitShort() {
	optAName="${1%"${1#??}"}"; optBName="-${1#??}"
}
optSplitEquals() {
	optName="${1%="${1#--*=}"}"; optArg="${1#--*=}"
}
optArgStr() {
	if [ -n "${1#??}" ] && [ "${1#--}" = "${1:?}" ]; then optArg="${1#??}"; optShift='0';
	elif [ -n "${2+x}" ]; then optArg="${2-}"; optShift='1';
	else optDie "No argument for ${1:?} option"; fi
}
optArgBool() {
	if [ "${1#--no-}" = "${1:?}" ]; then optArg='true';
	else optArg='false'; fi
}
optDie() {
	printf '%s\n' "${@-}" "Try '${0} --help' for more information" >&2
	exit 2
}

# Show help and quit.
showHelp() {
	printf '%s\n' "$(cat <<-EOF
		Usage: ${0} [OPTION]...

		Create a WireGuard peer configuration.

		Options:

		 -i, --interface <INTERFACE>
		    WireGuard interface name.

		 -n, --peer-number <NUMBER>
		    Peer number.

		 -c, --peer-comment <COMMENT>
		    Peer comment.

		 -e, --peer-endpoint <ENDPOINT>
		    Peer endpoint (host and port).

		 -k, --peer-private-key <PRIVATE KEY>
		    Peer private key.

		 -p, --peer-public-key <PUBLIC KEY>
		    Peer public key.

		 -s, --peer-preshared-key <PRESHARED KEY>
		    Peer preshared key.

		 -r, --[no-]qr
		    Print a QR code with the remote peer configuration.

		 -q, --[no-]quiet
		    Suppress non-error messages.

		 -h, --help
		    Show this help and quit.
	EOF
	)"
	exit 0
}

main() {
	# Parse command line options.
	# shellcheck disable=SC2086
	{ optParse "${@-}"; _IFS="${IFS?}"; IFS="${SEP:?}"; set -- ${POS-} >/dev/null; IFS="${_IFS?}"; }

	# Set default values.
	interface="${interface:-wg0}"
	ownPublicKey="$(wg show "${interface:?}" public-key)"
	peerNumber="${peerNumber:-$(i='0'; while [ -e "/etc/wireguard/${interface:?}.conf.d/peer-${i:?}.conf" ]; do i="$((i+1))"; done; printf '%d' "${i:?}")}"
	peerComment="${peerComment:-${interface:?} - peer #${peerNumber:?}}"
	peerEndpoint="${peerEndpoint:-$(hostname -f):51820}"
	peerPrivateKey="${peerPrivateKey:-$(wg genkey)}"
	peerPublicKey="${peerPublicKey:-$(printf '%s' "${peerPrivateKey:?}" | wg pubkey)}"
	peerPresharedKey="${peerPresharedKey:-$(wg genpsk)}"
	peerIpv4Suffix="$(printf '%d.%d' $((((peerNumber + 2) >> 8) & 0xFF)) $(((peerNumber + 2) & 0xFF)))"
	peerIpv6Suffix="$(printf '%x' $(((peerNumber + 2) & 0xFFFF)))"
	qr="${qr:-true}"
	quiet="${quiet:-false}"

	# Create local peer configuration.
	export WG_OWN_PUBLIC_KEY="${ownPublicKey:?}"
	export WG_PEER_COMMENT="${peerComment:?}"
	export WG_PEER_ENDPOINT="${peerEndpoint:?}"
	export WG_PEER_PRIVATE_KEY="${peerPrivateKey:?}"
	export WG_PEER_PUBLIC_KEY="${peerPublicKey:?}"
	export WG_PEER_PRESHARED_KEY="${peerPresharedKey:?}"
	export WG_PEER_IPV4_SUFFIX="${peerIpv4Suffix:?}"
	export WG_PEER_IPV6_SUFFIX="${peerIpv6Suffix:?}"
	envsubst < "/etc/wireguard/${interface:?}.conf.d/peer-local.tpl" > "/etc/wireguard/${interface:?}.conf.d/peer-${peerNumber:?}.conf"

	# Print remote peer configuration.
	if [ "${quiet:?}" != 'true' ]; then
		peerRemoteConfig="$(envsubst < "/etc/wireguard/${interface:?}.conf.d/peer-remote.tpl")"
		printf '%s\n' "${peerRemoteConfig:?}"
		if [ "${qr:?}" = 'true' ] && command -v qrencode >/dev/null 2>&1; then
			printf '\n' >&2
			printf '%s\n' "${peerRemoteConfig:?}" | qrencode -t UTF8 >&2
		fi
	fi
}

main "${@-}"
